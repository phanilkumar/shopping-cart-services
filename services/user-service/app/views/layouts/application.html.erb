<!DOCTYPE html>
<html>
  <head>
    <title>User Service - Hotwire Interface</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag "application", "data-turbo-track": "reload", "data-timestamp": Time.current.to_i %>
    <!-- Removed javascript_importmap_tags since we're using custom JavaScript via CDN -->
    
    <!-- Fallback CSS for icon sizing -->
    <style>
      /* Force icon sizing - override any conflicting styles */
      svg.w-4, svg[class*="w-4"] { width: var(--tw-width-w-4, 1rem) !important; max-width: var(--tw-width-w-4, 1rem) !important; }
      svg.h-4, svg[class*="h-4"] { height: var(--tw-height-h-4, 1rem) !important; max-height: var(--tw-height-h-4, 1rem) !important; }
      svg.w-5, svg[class*="w-5"] { width: var(--tw-width-w-5, 1.25rem) !important; max-width: var(--tw-width-w-5, 1.25rem) !important; }
      svg.h-5, svg[class*="h-5"] { height: var(--tw-height-h-5, 1.25rem) !important; max-height: var(--tw-height-h-5, 1.25rem) !important; }
      svg.w-6, svg[class*="w-6"] { width: var(--tw-width-w-6, 1.5rem) !important; max-width: var(--tw-width-w-6, 1.5rem) !important; }
      svg.h-6, svg[class*="h-6"] { height: var(--tw-height-h-6, 1.5rem) !important; max-height: var(--tw-height-h-6, 1.5rem) !important; }
      svg.w-3, svg[class*="w-3"] { width: 0.75rem !important; max-width: 0.75rem !important; }
      svg.h-3, svg[class*="h-3"] { height: 0.75rem !important; max-height: 0.75rem !important; }
      
      /* Specific override for feature icons on home page */
      .features-section svg,
      .features-section svg.w-6,
      .features-section svg.h-6 {
        width: var(--tw-width-w-6, 1.5rem) !important;
        height: var(--tw-height-h-6, 1.5rem) !important;
        max-width: var(--tw-width-w-6, 1.5rem) !important;
        max-height: var(--tw-height-h-6, 1.5rem) !important;
        flex-shrink: 0;
        box-sizing: border-box;
      }
      
      /* Ensure all SVG icons respect their size classes */
      svg[class*="w-"] { width: var(--tw-width) !important; max-width: var(--tw-width) !important; }
      svg[class*="h-"] { height: var(--tw-height) !important; max-height: var(--tw-height) !important; }
      
      /* Additional icon size constraints */
      svg {
        box-sizing: border-box;
        max-width: none;
        max-height: none;
      }
      
      /* CSS Custom Properties for icon sizing */
      :root {
        --tw-width-w-6: 1.5rem;
        --tw-height-h-6: 1.5rem;
        --tw-width-w-4: 1rem;
        --tw-height-h-4: 1rem;
        --tw-width-w-5: 1.25rem;
        --tw-height-h-5: 1.25rem;
      }
    </style>

    <!-- CSS and JS will be loaded via CDN for simplicity -->
    <script src="https://cdn.jsdelivr.net/npm/@hotwired/turbo@7.3.0/dist/turbo.es2017-umd.js"></script>
    
    <!-- Unified Login JavaScript -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded, initializing unified login...');
        
        // Create a simple controller manager
        const controllers = {};
          
          // Unified Login Controller
          class UnifiedLoginController {
            constructor(element) {
              this.element = element;
              this.currentPhone = null;
              this.resendTimer = null;
              this.countdownInterval = null;
              this.failedAttempts = 0;
              this.maxFailedAttempts = 3;
              this.initialize();
            }
            
            initialize() {
              console.log('UnifiedLoginController initialized');
              this.setupEventListeners();
              this.setupOtpInputs();
              this.setupEmailForm();
              this.checkForServerErrors();
            }
            
            setupEventListeners() {
              // Tab switching
              const emailTab = this.element.querySelector('[data-action*="switchToEmail"]');
              const phoneTab = this.element.querySelector('[data-action*="switchToPhone"]');
              
              if (emailTab) {
                emailTab.addEventListener('click', () => this.switchToEmail());
              }
              if (phoneTab) {
                phoneTab.addEventListener('click', () => this.switchToPhone());
              }
              
              // OTP functionality
              const sendOtpBtn = this.element.querySelector('[data-action*="sendOtp"]');
              const verifyOtpBtn = this.element.querySelector('[data-action*="verifyOtp"]');
              const resendOtpBtn = this.element.querySelector('[data-action*="resendOtp"]');
              
              if (sendOtpBtn) {
                sendOtpBtn.addEventListener('click', () => this.sendOtp());
              }
              if (verifyOtpBtn) {
                verifyOtpBtn.addEventListener('click', () => this.verifyOtp());
              }
              if (resendOtpBtn) {
                resendOtpBtn.addEventListener('click', () => this.resendOtp());
              }
            }
            
            // Tab switching methods
            switchToEmail() {
              console.log('Switching to email tab');
              const emailTab = this.element.querySelector('[data-unified-login-target="emailTab"]');
              const phoneTab = this.element.querySelector('[data-unified-login-target="phoneTab"]');
              const emailLogin = this.element.querySelector('[data-unified-login-target="emailLogin"]');
              const phoneLogin = this.element.querySelector('[data-unified-login-target="phoneLogin"]');
              
              if (emailTab) emailTab.classList.add('bg-white', 'text-blue-600', 'shadow-sm');
              if (emailTab) emailTab.classList.remove('text-gray-600', 'hover:text-gray-900');
              if (phoneTab) phoneTab.classList.remove('bg-white', 'text-blue-600', 'shadow-sm');
              if (phoneTab) phoneTab.classList.add('text-gray-600', 'hover:text-gray-900');
              if (emailLogin) emailLogin.classList.remove('hidden');
              if (phoneLogin) phoneLogin.classList.add('hidden');
              
              this.clearAllErrors();
            }
            
            switchToPhone() {
              console.log('Switching to phone tab');
              const emailTab = this.element.querySelector('[data-unified-login-target="emailTab"]');
              const phoneTab = this.element.querySelector('[data-unified-login-target="phoneTab"]');
              const emailLogin = this.element.querySelector('[data-unified-login-target="emailLogin"]');
              const phoneLogin = this.element.querySelector('[data-unified-login-target="phoneLogin"]');
              
              if (phoneTab) phoneTab.classList.add('bg-white', 'text-blue-600', 'shadow-sm');
              if (phoneTab) phoneTab.classList.remove('text-gray-600', 'hover:text-gray-900');
              if (emailTab) emailTab.classList.remove('bg-white', 'text-blue-600', 'shadow-sm');
              if (emailTab) emailTab.classList.add('text-gray-600', 'hover:text-gray-900');
              if (phoneLogin) phoneLogin.classList.remove('hidden');
              if (emailLogin) emailLogin.classList.add('hidden');
              
              this.clearAllErrors();
            }
            
            // Helper methods
            setupOtpInputs() {
              const otpInputs = this.element.querySelectorAll('[data-unified-login-target^="otp"]');
              otpInputs.forEach((input, index) => {
                input.addEventListener('input', (e) => {
                  if (e.target.value.length === 1 && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                  }
                });
                
                input.addEventListener('keydown', (e) => {
                  if (e.key === 'Backspace' && e.target.value.length === 0 && index > 0) {
                    otpInputs[index - 1].focus();
                  }
                });
              });
            }
            
            setupEmailForm() {
              // Email form setup if needed
            }
            
            checkForServerErrors() {
              // Check for server errors if needed
            }
            
            clearAllErrors() {
              const errorElements = this.element.querySelectorAll('[data-unified-login-target*="Error"]');
              errorElements.forEach(el => el.classList.add('hidden'));
            }
            
            // Placeholder methods for OTP functionality
            async sendOtp() {
              console.log('Send OTP functionality would be implemented here');
              // This would make an AJAX call to send OTP
            }
            
            async verifyOtp() {
              console.log('Verify OTP functionality would be implemented here');
              // This would make an AJAX call to verify OTP
            }
            
            async resendOtp() {
              console.log('Resend OTP functionality would be implemented here');
              // This would make an AJAX call to resend OTP
            }
          }
          
          // Initialize controllers for elements with data-controller="unified-login"
          document.querySelectorAll('[data-controller="unified-login"]').forEach(element => {
            controllers[element.id || 'unified-login-' + Math.random()] = new UnifiedLoginController(element);
          });
      });
    </script>
    
    <!-- Custom styles -->
    <style>
      .btn-primary {
        @apply bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded;
      }
      .btn-secondary {
        @apply bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded;
      }
      .form-input {
        @apply mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500;
      }
      .form-label {
        @apply block text-sm font-medium text-gray-700;
      }
      .alert {
        @apply p-4 mb-4 rounded;
      }
      .alert-success {
        @apply bg-green-100 border border-green-400 text-green-700;
      }
      .alert-error {
        @apply bg-red-100 border border-red-400 text-red-700;
      }
      .alert-info {
        @apply bg-blue-100 border border-blue-400 text-blue-700;
      }
      
      /* Additional icon size fixes for home page */
      .features-section svg {
        width: 1.5rem !important;
        height: 1.5rem !important;
        max-width: 1.5rem !important;
        max-height: 1.5rem !important;
        flex-shrink: 0;
        box-sizing: border-box;
      }
      
      /* Ensure all SVG icons respect their size classes */
      svg.w-6, svg[class*="w-6"] {
        width: 1.5rem !important;
        max-width: 1.5rem !important;
      }
      
      svg.h-6, svg[class*="h-6"] {
        height: 1.5rem !important;
        max-height: 1.5rem !important;
      }
      
      /* Force icon sizing with CSS variables */
      :root {
        --tw-width-w-6: 1.5rem;
        --tw-height-h-6: 1.5rem;
      }
      
      /* Aggressive icon size override for home page */
      .features-section svg,
      .features-section svg[style*="width"],
      .features-section svg[style*="height"] {
        width: 1.5rem !important;
        height: 1.5rem !important;
        max-width: 1.5rem !important;
        max-height: 1.5rem !important;
        min-width: 1.5rem !important;
        min-height: 1.5rem !important;
        flex-shrink: 0 !important;
        box-sizing: border-box !important;
      }
      
      /* Override any inline styles that might be causing issues */
      .features-section svg[style] {
        width: 1.5rem !important;
        height: 1.5rem !important;
        max-width: 1.5rem !important;
        max-height: 1.5rem !important;
      }
      
      /* Highest specificity override for home page icons */
      body .features-section .absolute.flex.items-center.justify-center.h-12.w-12 svg.h-6.w-6 {
        width: 1.5rem !important;
        height: 1.5rem !important;
        max-width: 1.5rem !important;
        max-height: 1.5rem !important;
        min-width: 1.5rem !important;
        min-height: 1.5rem !important;
        flex-shrink: 0 !important;
        box-sizing: border-box !important;
        transform: none !important;
        scale: 1 !important;
      }
      
      /* Override any potential browser defaults */
      .features-section svg {
        width: 1.5rem !important;
        height: 1.5rem !important;
        max-width: 1.5rem !important;
        max-height: 1.5rem !important;
        min-width: 1.5rem !important;
        min-height: 1.5rem !important;
        flex-shrink: 0 !important;
        box-sizing: border-box !important;
      }
    </style>
  </head>

  <body class="bg-gray-50 min-h-screen">
    <!-- Navigation -->
    <nav class="bg-white shadow-lg border-b sticky top-0 z-50">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <div class="flex items-center space-x-3">
              <div class="h-8 w-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                <svg class="h-5 w-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              </div>
              <h1 class="text-xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 bg-clip-text text-transparent">
                User Service
              </h1>
            </div>
          </div>
          <div class="flex items-center space-x-4">
            <!-- Language Switcher -->
            <%= render 'shared/language_switcher' %>
            
            <% if user_signed_in? %>
              <%= link_to dashboard_path, class: "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200 transform hover:scale-105 shadow-md" do %>
                <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                </svg>
                <%= t('common.dashboard') %>
              <% end %>
              <%= link_to destroy_user_session_path, method: :delete, class: "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-all duration-200 transform hover:scale-105 shadow-md" do %>
                <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                </svg>
                <%= t('common.logout') %>
              <% end %>
            <% else %>
              <%= link_to new_user_session_path, class: "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200 transform hover:scale-105 shadow-md" do %>
                <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
                </svg>
                <%= t('common.login') %>
              <% end %>
              <%= link_to new_user_registration_path, class: "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-200 transform hover:scale-105 shadow-md" do %>
                <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              <%= t('common.register') %>
            <% end %>
            <% end %>
          </div>
        </div>
      </div>
    </nav>

    <!-- Flash Messages -->
    <% if notice %>
      <div class="alert alert-success">
        <%= notice %>
      </div>
    <% end %>
    
    <% if alert %>
      <div class="alert alert-error">
        <%= alert %>
      </div>
    <% end %>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <%= yield %>
    </main>

    <!-- Footer -->
    <footer class="bg-white border-t mt-auto">
      <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
        <p class="text-center text-gray-500 text-sm">
          User Service - Hotwire Interface
        </p>
      </div>
    </footer>
  </body>
</html>
