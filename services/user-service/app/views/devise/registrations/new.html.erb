<div class="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 via-emerald-50 to-teal-50 py-2 px-4 sm:px-6 lg:px-8">
  <div class="max-w-sm w-full">
    <div>
      <div class="mx-auto h-12 w-12 bg-gradient-to-r from-green-600 to-emerald-600 rounded-full flex items-center justify-center shadow-lg mb-4">
        <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
        </svg>
      </div>
      <h2 class="mt-2 text-center text-xl font-bold text-gray-900">
        <%= t('auth.register_title') %>
      </h2>
      <p class="mt-1 text-center text-sm text-gray-600">
        <%= t('auth.join_us_today') %>
      </p>
      <p class="mt-1 text-center text-xs text-gray-500">
        <%= t('common.or') %>
        <%= link_to t('auth.sign_in_to_your_account'), new_user_session_path, class: "font-medium text-green-600 hover:text-green-500" %>
      </p>
    </div>
    
    <div class="bg-white rounded-xl shadow-lg p-6 mt-6">
      <%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { class: "space-y-4" }) do |f| %>
        <% if resource.errors.any? %>
          <div class="p-3 bg-red-50 border border-red-200 rounded-lg">
            <div class="flex items-center space-x-2">
              <svg class="w-5 h-5 text-red-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <div class="text-sm text-red-600">
                <ul class="list-disc list-inside space-y-1">
                  <% resource.errors.full_messages.each do |message| %>
                    <li><%= message %></li>
                  <% end %>
                </ul>
              </div>
            </div>
          </div>
        <% end %>
        
        <div class="space-y-4">
          <div class="grid grid-cols-2 gap-4">
            <div>
              <%= f.label :first_name, t('auth.first_name'), class: "block text-sm font-medium text-gray-700 mb-2" %>
              <%= f.text_field :first_name, autocomplete: "given-name", placeholder: t('auth.first_name_placeholder'), class: "block w-full px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm transition-all duration-200 bg-white" %>
            </div>
            <div>
              <%= f.label :last_name, t('auth.last_name'), class: "block text-sm font-medium text-gray-700 mb-2" %>
              <%= f.text_field :last_name, autocomplete: "family-name", placeholder: t('auth.last_name_placeholder'), class: "block w-full px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm transition-all duration-200 bg-white" %>
            </div>
          </div>
          
          <div>
            <%= f.label :email, t('auth.email'), class: "block text-sm font-medium text-gray-700 mb-2" %>
            <%= f.email_field :email, 
                autocomplete: "email", 
                placeholder: t('auth.enter_email_placeholder'), 
                class: "block w-full px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm transition-all duration-200 bg-white",
                maxlength: "50",
                pattern: "[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$",
                title: t('auth.valid_email_title') %>
          </div>
          
          <div>
            <%= f.label :phone, t('auth.phone'), class: "block text-sm font-medium text-gray-700 mb-2" %>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <span class="text-gray-500 text-sm font-medium">+91</span>
              </div>
              <%= f.telephone_field :phone, 
                  autocomplete: "tel", 
                  placeholder: t('auth.enter_phone_placeholder'), 
                  class: "block w-full pl-12 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm transition-all duration-200 bg-white",
                  id: "user_phone",
                  pattern: "[0-9]*",
                  inputmode: "numeric",
                  maxlength: "10",
                  oninput: "this.value = this.value.replace(/[^0-9]/g, '').slice(0, 10)" %>
            </div>
          </div>
          
          <div>
            <%= f.label :password, t('auth.password'), class: "block text-sm font-medium text-gray-700 mb-2" %>
            <%= f.password_field :password, 
                autocomplete: "new-password", 
                placeholder: t('auth.create_password_placeholder'), 
                class: "block w-full px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm transition-all duration-200 bg-white password-field",
                id: "user_password",
                maxlength: "16" %>
            
            <!-- Password Strength Progress Bar -->
            <div class="mt-2 hidden" id="password-strength-container">
              <div class="flex items-center justify-between mb-1">
                <span class="text-xs text-gray-500"><%= t('auth.password_strength') %>:</span>
                <span class="text-xs font-medium text-gray-400" id="strength-text"><%= t('auth.very_weak') %></span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
                <div class="h-2 rounded-full transition-all duration-300 ease-in-out bg-red-500" 
                     style="width: 0%; min-width: 0;" 
                     id="progress-bar"></div>
              </div>
            </div>
            
            <!-- Password Requirements -->
            <div class="mt-3 p-3 bg-gray-50 rounded-lg hidden" id="password-requirements-container">
              <p class="text-xs font-medium text-gray-700 mb-2"><%= t('auth.password_requirements') %>:</p>
              <div class="space-y-1">
                <div class="flex items-center space-x-2 requirement-item" data-requirement="length">
                  <span class="requirement-icon">
                    <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd"></path>
                    </svg>
                  </span>
                  <span class="requirement-text text-xs text-gray-400"><%= t('auth.password_length_requirement') %></span>
                </div>
                <div class="flex items-center space-x-2 requirement-item" data-requirement="letter">
                  <span class="requirement-icon">
                    <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd"></path>
                    </svg>
                  </span>
                  <span class="requirement-text text-xs text-gray-400"><%= t('auth.password_letter_requirement') %></span>
                </div>
                <div class="flex items-center space-x-2 requirement-item" data-requirement="number">
                  <span class="requirement-icon">
                    <svg class="requirement-icon">
                    <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd"></path>
                    </svg>
                  </span>
                  <span class="requirement-text text-xs text-gray-400"><%= t('auth.password_number_requirement') %></span>
                </div>
                <div class="flex items-center space-x-2 requirement-item" data-requirement="special">
                  <span class="requirement-icon">
                    <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd"></path>
                    </svg>
                  </span>
                  <span class="requirement-text text-xs text-gray-400"><%= t('auth.password_special_requirement') %></span>
                </div>
              </div>
            </div>
          </div>
          
          <div>
            <%= f.label :password_confirmation, t('auth.confirm_password'), class: "block text-sm font-medium text-gray-700 mb-2" %>
            <%= f.password_field :password_confirmation, autocomplete: "new-password", placeholder: t('auth.confirm_password_placeholder'), class: "block w-full px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm transition-all duration-200 bg-white", maxlength: "16" %>
          </div>
        </div>

        <!-- Terms and Conditions Checkbox -->
        <div class="flex items-start space-x-3">
          <div class="flex items-center h-5">
            <input id="terms_agreement" name="terms_agreement" type="checkbox" required
                   class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded">
          </div>
          <div class="text-sm">
            <label for="terms_agreement" class="text-gray-700">
              <%= t('auth.i_agree_to_the') %> 
              <%= link_to t('navigation.terms'), terms_path, class: "text-green-600 hover:text-green-500 font-medium" %>
              <%= t('common.and') %> 
              <%= link_to t('navigation.privacy'), privacy_path, class: "text-green-600 hover:text-green-500 font-medium" %>
            </label>
          </div>
        </div>

        <%= f.submit t('auth.sign_up'), class: "w-full bg-gradient-to-r from-green-600 to-emerald-600 text-white py-3 px-4 rounded-lg font-medium hover:from-green-700 hover:to-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98]" %>
      <% end %>
    </div>
    

  </div>
</div>

<script>
// Global function to initialize password strength - can be called multiple times
function initializePasswordStrength() {
  console.log('Initializing password strength functionality...');
  
  const passwordField = document.getElementById('user_password');
  const progressBar = document.getElementById('progress-bar');
  const strengthText = document.getElementById('strength-text');
  const requirementItems = document.querySelectorAll('.requirement-item');
  const strengthContainer = document.getElementById('password-strength-container');
  const requirementsContainer = document.getElementById('password-requirements-container');
  
  console.log('Found elements:', {
    passwordField: !!passwordField,
    progressBar: !!progressBar,
    strengthText: !!strengthText,
    requirementItems: requirementItems.length,
    strengthContainer: !!strengthContainer,
    requirementsContainer: !!requirementsContainer
  });
  
  // Check if we're on a page that has password strength functionality
  if (!passwordField || !progressBar || !strengthText || !strengthContainer || !requirementsContainer) {
    console.log('Password strength elements not found - not on registration page, skipping initialization');
    return;
  }
  
  function updatePasswordStrength() {
    const password = passwordField.value;
    console.log('Password changed:', password);
    
    // Show/hide containers based on whether password has content
    if (password.length > 0) {
      strengthContainer.classList.remove('hidden');
      requirementsContainer.classList.remove('hidden');
    } else {
      strengthContainer.classList.add('hidden');
      requirementsContainer.classList.add('hidden');
      return; // Don't calculate strength for empty password
    }
    
    // Calculate strength
    let score = 0;
    const checks = {
      length: password.length >= 8 && password.length <= 16,
      letter: /[a-zA-Z]/.test(password),
      number: /\d/.test(password),
      special: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)
    };
    
    console.log('Password checks:', checks);
    
    // Count how many requirements are met
    const metRequirements = Object.values(checks).filter(check => check).length;
    
    // Base score: 20 points per requirement met (max 80 points)
    score = metRequirements * 20;
    
    // Bonus for length (max 20 points)
    let lengthBonus = 0;
    if (password.length >= 12) {
      lengthBonus = 20;
      score += 20;
    } else if (password.length >= 10) {
      lengthBonus = 10;
      score += 10;
    } else if (password.length >= 8) {
      lengthBonus = 5;
      score += 5;
    }
    
    score = Math.min(score, 100);
    console.log('Calculated score:', score);
    console.log('Met requirements:', metRequirements, 'out of 4');
    console.log('Length bonus:', lengthBonus);
    console.log('Password length:', password.length);
    
    // Update progress bar - ensure proper reset and setting
    progressBar.style.width = '0%'; // Reset first
    progressBar.style.minWidth = '0%';
    progressBar.style.maxWidth = '100%';
    
    // Force a reflow
    progressBar.offsetHeight;
    
    // Now set the actual width
    progressBar.style.width = score + '%';
    
    console.log('Progress bar width set to:', score + '%');
    console.log('Progress bar element:', progressBar);
    console.log('Progress bar computed style:', window.getComputedStyle(progressBar).width);
    
    // Update color
    let colorClass = 'bg-red-500';
    if (score >= 80) colorClass = 'bg-green-500';
    else if (score >= 60) colorClass = 'bg-blue-500';
    else if (score >= 40) colorClass = 'bg-yellow-500';
    else if (score >= 20) colorClass = 'bg-orange-500';
    
    progressBar.className = 'h-2 rounded-full transition-all duration-300 ease-in-out ' + colorClass;
    
    // Update strength text
    let text = 'Very Weak';
    let textColor = 'text-red-600';
    if (score >= 80) {
      text = 'Very Strong';
      textColor = 'text-green-600';
    } else if (score >= 60) {
      text = 'Strong';
      textColor = 'text-blue-600';
    } else if (score >= 40) {
      text = 'Medium';
      textColor = 'text-yellow-600';
    } else if (score >= 20) {
      text = 'Weak';
      textColor = 'text-orange-600';
    }
    
    strengthText.textContent = text;
    strengthText.className = 'text-xs font-medium ' + textColor;
    
    // Update requirements
    const requirementTypes = ['length', 'letter', 'number', 'special'];
    requirementTypes.forEach((type, index) => {
      const item = requirementItems[index];
      const check = checks[type];
      const icon = item.querySelector('.requirement-icon');
      const text = item.querySelector('.requirement-text');
      
      if (check) {
        icon.innerHTML = '<svg class="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>';
        text.classList.remove('text-gray-400');
        text.classList.add('text-green-600');
      } else {
        icon.innerHTML = '<svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd"></path></svg>';
        text.classList.remove('text-green-600');
        text.classList.add('text-gray-400');
      }
    });
  }
  
  // Add event listener
  passwordField.addEventListener('input', updatePasswordStrength);
  
  // Initial call
  updatePasswordStrength();
  
  // Phone number validation - only allow numbers
  const phoneField = document.getElementById('user_phone');
  if (phoneField) {
    // Clean the phone field on page load (remove +91 prefix if present)
    if (phoneField.value) {
      phoneField.value = phoneField.value.replace(/^\+?91/, '').replace(/[^0-9]/g, '').slice(0, 10);
    }
    
    phoneField.addEventListener('input', function(e) {
      // Remove any non-numeric characters
      this.value = this.value.replace(/[^0-9]/g, '');
      
      // Limit to 10 digits
      if (this.value.length > 10) {
        this.value = this.value.slice(0, 10);
      }
    });
    
    // Prevent paste of non-numeric content
    phoneField.addEventListener('paste', function(e) {
      e.preventDefault();
      const pastedText = (e.clipboardData || window.clipboardData).getData('text');
      const numericOnly = pastedText.replace(/[^0-9]/g, '').slice(0, 10);
      this.value = numericOnly;
    });
    
    // Prevent drag and drop of non-numeric content
    phoneField.addEventListener('drop', function(e) {
      e.preventDefault();
    });
  }
  
  console.log('Password strength setup complete!');
  
  // Email validation - real-time feedback
  const emailField = document.querySelector('input[type="email"]');
  if (emailField) {
    emailField.addEventListener('input', function() {
      const email = this.value;
      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
      
      // Remove existing validation classes
      this.classList.remove('border-red-500', 'border-green-500', 'focus:ring-red-500', 'focus:ring-green-500');
      
      if (email.length === 0) {
        // Empty field - neutral state
        this.classList.add('border-gray-300', 'focus:ring-green-500');
      } else if (email.length > 50) {
        // Too long
        this.classList.add('border-red-500', 'focus:ring-red-500');
      } else if (emailRegex.test(email)) {
        // Valid email
        this.classList.add('border-green-500', 'focus:ring-green-500');
      } else {
        // Invalid format
        this.classList.add('border-red-500', 'focus:ring-red-500');
      }
    });
  }
}

// Initialize on DOM load
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, initializing password strength...');
  initializePasswordStrength();
});

// Re-initialize when form is re-rendered (after validation errors)
document.addEventListener('turbo:load', function() {
  console.log('Turbo load event, re-initializing password strength...');
  initializePasswordStrength();
});

// Also listen for Rails UJS events
document.addEventListener('rails:attachBindings', function() {
  console.log('Rails UJS event, re-initializing password strength...');
  initializePasswordStrength();
});

// Initialize immediately if DOM is already loaded
if (document.readyState === 'loading') {
  // DOM is still loading, wait for DOMContentLoaded
} else {
  // DOM is already loaded, initialize immediately
  console.log('DOM already loaded, initializing immediately...');
  initializePasswordStrength();
}
</script>
