<div class="min-h-screen flex flex-col bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 py-12 px-4 sm:px-6 lg:px-8"
     data-controller="unified-login">
  <!-- Background decoration -->
  <div class="absolute inset-0 overflow-hidden">
    <div class="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-3xl"></div>
    <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-tr from-indigo-400/20 to-pink-400/20 rounded-full blur-3xl"></div>
  </div>

  <!-- Main content container -->
  <div class="flex-1 flex items-center justify-center">
    <div class="relative max-w-md w-full space-y-8">
    <!-- Logo/Brand Section -->
    <div class="text-center">
      <div class="mx-auto h-20 w-20 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 rounded-3xl flex items-center justify-center shadow-2xl mb-8 transform hover:scale-105 transition-all duration-300">
        <svg class="h-10 w-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
        </svg>
      </div>
      <h2 class="text-4xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent mb-2">
        Welcome Back
      </h2>
      <p class="text-gray-600 text-lg font-medium">
        Sign in to your secure account
      </p>
    </div>
    
    <!-- Unified Login Form -->
    <div class="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-8">
      <!-- Step 1: Email/Phone Input -->
      <div data-unified-login-target="step1" class="space-y-6">
        <div class="space-y-2">
          <label class="block text-sm font-semibold text-gray-700">
            Email or Phone Number
          </label>
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
              <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c-5 0-9-4-9-9s4-9 9-9"></path>
              </svg>
            </div>
            <input type="text" 
                   data-unified-login-target="identifier"
                   data-action="blur->unified-login#detectType"
                   class="block w-full pl-12 pr-4 py-4 border border-gray-300 rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-base"
                   placeholder="Enter your email or phone number">
          </div>
          <p class="text-sm text-gray-500">
            Enter your email address or phone number to continue
          </p>
        </div>

        <div>
          <button type="button" 
                  data-action="click->unified-login#continue"
                  class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-semibold rounded-xl text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transform hover:scale-105 transition-all duration-200 shadow-lg">
            Continue
          </button>
        </div>
      </div>

      <!-- Step 2: Password Authentication (for Email) -->
      <div data-unified-login-target="step2Password" class="hidden space-y-6">
        <div class="text-center mb-8">
          <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full mb-4 shadow-lg">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-gray-900 mb-2">Secure Authentication</h2>
          <div class="flex items-center justify-center space-x-2 text-gray-600 bg-gradient-to-r from-blue-50 to-purple-50 px-4 py-3 rounded-xl border border-blue-100">
            <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
              <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
              </svg>
            </div>
            <span class="text-sm font-semibold text-gray-700" data-unified-login-target="emailDisplay"></span>
          </div>
        </div>

        <div class="space-y-6" data-unified-login-target="passwordForm" data-action="submit->unified-login#preventFormSubmit">
          <!-- Hidden input for identifier (no name attribute to prevent form submission) -->
          <input type="hidden" data-unified-login-target="passwordIdentifier">
          
          <div class="space-y-3">
            <div class="flex items-center justify-between">
              <label class="block text-sm font-semibold text-gray-700">Password</label>
              <a href="#" class="text-sm text-blue-600 hover:text-blue-700 font-medium transition-colors duration-200">
                Forgot password?
              </a>
            </div>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                </svg>
              </div>
              <input type="password" 
                     data-unified-login-target="passwordInput"
                     data-action="input->unified-login#hidePasswordError keydown->unified-login#handlePasswordKeydown"
                     required
                     minlength="8"
                     maxlength="16"
                     class="block w-full pl-12 pr-4 py-4 border border-gray-300 rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-base"
                     placeholder="Enter your password">
            </div>

            </div>
            <!-- Error message container -->
            <div data-unified-login-target="passwordError" class="hidden">
              <div class="flex items-center space-x-2 text-red-600 bg-red-50 border border-red-200 rounded-lg px-3 py-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span class="text-sm font-medium" data-unified-login-target="passwordErrorMessage"></span>
              </div>
            </div>
          </div>

          <div class="flex items-center">
            <input id="remember-me" name="remember-me" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
            <label for="remember-me" class="ml-2 block text-sm text-gray-700">
              Remember me for 30 days
            </label>
          </div>

          <div class="space-y-4">
            <button type="button" 
                    data-action="click->unified-login#handlePasswordSubmit"
                    class="group relative w-full flex justify-center py-4 px-4 border border-transparent text-base font-semibold rounded-xl text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transform hover:scale-105 transition-all duration-200 shadow-lg">
              <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                <svg class="h-5 w-5 text-blue-200 group-hover:text-blue-100 transition-colors duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
                </svg>
              </span>
              Sign In
            </button>
            
            <button type="button" 
                    data-action="click->unified-login#backToStep1"
                    class="w-full flex items-center justify-center py-3 px-4 border border-gray-300 text-sm font-medium rounded-xl text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
              Back to login
            </button>
          </div>
        </div>
      </div>

      <!-- Step 2: OTP Authentication (for Phone) -->
      <div data-unified-login-target="step2OTP" class="hidden space-y-6">
        <div class="text-center mb-8">
          <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-600 rounded-full mb-4 shadow-lg">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-gray-900 mb-2">Mobile Verification</h2>
          <div class="flex items-center justify-center space-x-2 text-gray-600 bg-gradient-to-r from-green-50 to-emerald-50 px-4 py-3 rounded-xl border border-green-100">
            <div class="w-8 h-8 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center">
              <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
              </svg>
            </div>
            <span class="text-sm font-semibold text-gray-700" data-unified-login-target="phoneDisplay"></span>
          </div>
        </div>

        <div class="space-y-6" data-unified-login-target="otpForm">
          <input type="hidden" data-unified-login-target="otpPhone">
          
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700">6-Digit OTP</label>
            <div class="flex justify-center space-x-2 mb-2">
              <div class="relative">
                <input type="text" maxlength="1" 
                       class="w-12 h-12 text-center text-xl font-semibold border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200"
                       data-unified-login-target="otpDigit1"
                       data-action="input->unified-login#moveToNext input->unified-login#updateOTPValue keydown->unified-login#handleOTPKeydown">
              </div>
              <div class="relative">
                <input type="text" maxlength="1" 
                       class="w-12 h-12 text-center text-xl font-semibold border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200"
                       data-unified-login-target="otpDigit2"
                       data-action="input->unified-login#moveToNext input->unified-login#updateOTPValue keydown->unified-login#handleOTPKeydown">
              </div>
              <div class="w-4 flex items-center justify-center">
                <span class="text-gray-400 text-lg font-bold">-</span>
              </div>
              <div class="relative">
                <input type="text" maxlength="1" 
                       class="w-12 h-12 text-center text-xl font-semibold border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200"
                       data-unified-login-target="otpDigit3"
                       data-action="input->unified-login#moveToNext input->unified-login#updateOTPValue keydown->unified-login#handleOTPKeydown">
              </div>
              <div class="relative">
                <input type="text" maxlength="1" 
                       class="w-12 h-12 text-center text-xl font-semibold border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200"
                       data-unified-login-target="otpDigit4"
                       data-action="input->unified-login#moveToNext input->unified-login#updateOTPValue keydown->unified-login#handleOTPKeydown">
              </div>
              <div class="w-4 flex items-center justify-center">
                <span class="text-gray-400 text-lg font-bold">-</span>
              </div>
              <div class="relative">
                <input type="text" maxlength="1" 
                       class="w-12 h-12 text-center text-xl font-semibold border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200"
                       data-unified-login-target="otpDigit5"
                       data-action="input->unified-login#moveToNext input->unified-login#updateOTPValue keydown->unified-login#handleOTPKeydown">
              </div>
              <div class="relative">
                <input type="text" maxlength="1" 
                       class="w-12 h-12 text-center text-xl font-semibold border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200"
                       data-unified-login-target="otpDigit6"
                       data-action="input->unified-login#updateOTPValue keydown->unified-login#handleOTPKeydown">
              </div>
            </div>
            <!-- Hidden input for form submission -->
            <input type="hidden" data-unified-login-target="otpHidden">
            <p class="text-sm text-gray-500 text-center">
              Enter the 6-digit code sent to your phone
            </p>
          </div>

          <div class="flex space-x-3">
            <button type="button" 
                    data-action="click->unified-login#backToStep1"
                    class="flex-1 px-4 py-3 border border-gray-300 rounded-xl text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-200">
              Back
            </button>
            <button type="button" 
                    data-action="click->unified-login#handleOTPSubmit"
                    class="flex-1 py-3 px-4 border border-transparent text-sm font-semibold rounded-xl text-white bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transform hover:scale-105 transition-all duration-200 shadow-lg">
              Verify OTP
            </button>
          </div>
        </div>

        <div class="text-center">
          <button type="button" 
                  data-action="click->unified-login#resendOTP"
                  class="text-sm text-green-600 hover:text-green-500 font-medium transition-colors duration-200">
            Didn't receive code? Resend OTP
          </button>
        </div>
      </div>

      <!-- Divider -->
      <div class="mt-6">
        <div class="relative">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-300"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-white text-gray-500">New to our platform?</span>
          </div>
        </div>
      </div>

      <!-- Sign up link -->
      <div class="mt-6 text-center">
        <%= link_to register_path, class: "inline-flex items-center px-4 py-2 border border-gray-300 rounded-xl shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200" do %>
          <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Create new account
        <% end %>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <div class="text-center text-sm text-gray-500 mt-8">
    <p>By signing in, you agree to our</p>
    <div class="mt-1 space-x-1">
      <%= link_to "Terms of Service", terms_path, class: "text-blue-600 hover:text-blue-500 transition-colors duration-200 underline" %>
      <span>and</span>
      <%= link_to "Privacy Policy", privacy_path, class: "text-blue-600 hover:text-blue-500 transition-colors duration-200 underline" %>
    </div>
  </div>
</div>

<!-- Stimulus Controller Script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const app = Stimulus.Application.start();
  
  app.register('unified-login', class extends Stimulus.Controller {
    static targets = [
      'step1', 'step2Password', 'step2OTP', 'identifier', 
      'passwordIdentifier', 'passwordInput', 'passwordError', 'passwordErrorMessage',
      'otpPhone', 'emailDisplay', 'phoneDisplay',
      'passwordForm', 'otpForm', 'otpHidden', 'otpDigit1', 'otpDigit2', 
      'otpDigit3', 'otpDigit4', 'otpDigit5', 'otpDigit6'
    ];

    connect() {
      this.currentStep = 1;
      this.identifierType = null;
    }

    detectType(event) {
      const value = event.target.value.trim();
      console.log('detectType called with value:', value);
      
      if (value) {
        // Check if it's an email or phone number
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        // Updated phone regex to match Indian phone numbers (10 digits starting with 6,7,8,9)
        const phoneRegex = /^(\+91)?[6-9]\d{9}$/;
        
        console.log('Testing email regex:', emailRegex.test(value));
        console.log('Testing phone regex:', phoneRegex.test(value));
        console.log('Phone regex pattern:', phoneRegex);
        console.log('Value being tested:', value);
        
        if (emailRegex.test(value)) {
          this.identifierType = 'email';
          console.log('Detected as email:', value);
        } else if (phoneRegex.test(value)) {
          this.identifierType = 'phone';
          console.log('Detected as phone:', value);
        } else {
          this.identifierType = null;
          console.log('Invalid format:', value);
        }
        
        console.log('Final identifierType:', this.identifierType);
      }
    }

    async continue() {
      const identifier = this.identifierTarget.value.trim();
      console.log('continue() called with identifier:', identifier);
      console.log('Current identifierType:', this.identifierType);
      
      if (!identifier) {
        alert('Email address or phone number required');
        return;
      }

      if (!this.identifierType) {
        alert('Invalid email address or phone number format');
        return;
      }

      console.log('Proceeding with identifierType:', this.identifierType);
      
      if (this.identifierType === 'email') {
        await this.showPasswordStep(identifier);
      } else {
        await this.showOTPStep(identifier);
      }
    }

    async showPasswordStep(identifier) {
      // First validate the email before showing password step
      const isValid = await this.validateEmail(identifier);
      
      if (isValid) {
        this.step1Target.classList.add('hidden');
        this.step2PasswordTarget.classList.remove('hidden');
        this.passwordIdentifierTarget.value = identifier;
        this.emailDisplayTarget.textContent = identifier;
        this.currentStep = 2;
      }
      // If not valid, the error is already shown and user stays on step 1
    }

    async validateEmail(email) {
      console.log('Validating email:', email);
      try {
        const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
        console.log('CSRF Token:', csrfToken);
        
        const response = await fetch('/api/v1/auth/validate-email', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrfToken
          },
          body: JSON.stringify({ email: email })
        });
        
        console.log('Response status:', response.status);
        const data = await response.json();
        console.log('Response data:', data);
        
        if (response.ok) {
          console.log('Email validated successfully');
          return true;
        } else {
          console.error('Email validation failed:', data.message);
          alert(data.message || 'Email validation failed. Retry.');
          return false;
        }
      } catch (error) {
        console.error('Error validating email:', error);
        alert('Network connection error. Verify connection and retry.');
        return false;
      }
    }

    async handlePasswordSubmit() {
      const identifier = this.passwordIdentifierTarget.value;
      const password = this.passwordInputTarget.value;
      
      console.log('Password submit - identifier:', identifier);
      console.log('Password submit - password length:', password.length);
      console.log('Password submit - method will be POST');
      console.log('Password submit - URL will be /login');
      
      if (!password) {
        this.showPasswordError('Password is required');
        return;
      }
      
      try {
        const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
        console.log('CSRF Token:', csrfToken);
        
        console.log('About to make fetch request to /api/v1/auth/password-login with POST method');
        const response = await fetch('/api/v1/auth/password-login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrfToken,
            'Accept': 'application/json'
          },
          body: JSON.stringify({ 
            identifier: identifier,
            password: password 
          })
        });
        console.log('Fetch request completed');
        
        console.log('Response status:', response.status);
        console.log('Response status text:', response.statusText);
        console.log('Response headers:', [...response.headers.entries()]);
        
        const responseText = await response.text();
        console.log('Response text:', responseText);
        console.log('Response text length:', responseText.length);
        
        let data = null;
        if (responseText && responseText.trim()) {
          try {
            data = JSON.parse(responseText);
            console.log('Parsed JSON data:', data);
          } catch (parseError) {
            console.error('JSON parse error:', parseError);
            console.error('Response text that failed to parse:', responseText);
            this.showPasswordError('Server response error. Please try again.');
            return;
          }
        }
        
        if (response.ok) {
          // Success - redirect to dashboard or show success message
          window.location.href = '/dashboard';
        } else {
          // Show error message from JSON response
          if (data && data.message) {
            console.log('Showing error message:', data.message);
            this.showPasswordError(data.message);
          } else {
            console.log('No data.message found, showing generic error');
            this.showPasswordError('Authentication failed. Please try again.');
          }
        }
      } catch (error) {
        console.error('Error during password authentication:', error);
        this.showPasswordError('Network error. Please try again.');
      }
    }

    showPasswordError(message) {
      this.passwordErrorMessageTarget.textContent = message;
      this.passwordErrorTarget.classList.remove('hidden');
      this.passwordInputTarget.focus();
    }

    hidePasswordError() {
      this.passwordErrorTarget.classList.add('hidden');
    }

    handlePasswordKeydown(event) {
      if (event.key === 'Enter') {
        event.preventDefault();
        this.handlePasswordSubmit();
      }
    }

    preventFormSubmit(event) {
      event.preventDefault();
      console.log('Form submission prevented');
    }

    async showOTPStep(identifier) {
      // First validate the phone number before showing OTP step
      const isValid = await this.validatePhoneNumber(identifier);
      
      if (isValid) {
        // Normalize phone number for display and storage
        let normalizedPhone = identifier.replace(/^\+91/, '').replace(/\D/g, '');
        
        this.step1Target.classList.add('hidden');
        this.step2OTPTarget.classList.remove('hidden');
        this.otpPhoneTarget.value = normalizedPhone;
        this.phoneDisplayTarget.textContent = normalizedPhone;
        this.currentStep = 2;
        
        // Set up OTP input formatting
        this.setupOTPFormatting();
      }
      // If not valid, the error is already shown and user stays on step 1
    }

    async validatePhoneNumber(phone) {
      console.log('Validating phone number:', phone);
      
      // Normalize phone number - remove +91 if present and ensure it's just 10 digits
      let normalizedPhone = phone.replace(/^\+91/, '').replace(/\D/g, '');
      
      // Validate it's a 10-digit Indian phone number
      if (!/^[6-9]\d{9}$/.test(normalizedPhone)) {
        alert('Invalid phone number format. Enter a 10-digit number starting with 6, 7, 8, or 9.');
        return false;
      }
      
      console.log('Normalized phone number:', normalizedPhone);
      
      try {
        // Check if CSRF token exists
        const csrfMetaTag = document.querySelector('meta[name="csrf-token"]');
        console.log('CSRF meta tag found:', csrfMetaTag);
        
        if (!csrfMetaTag) {
          console.error('CSRF token meta tag not found');
          alert('Security token not found. Please refresh the page and try again.');
          return false;
        }
        
        const csrfToken = csrfMetaTag.content;
        console.log('CSRF Token:', csrfToken);
        
        const response = await fetch('/api/v1/auth/send-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrfToken
          },
          body: JSON.stringify({ phone: normalizedPhone })
        });
        
        console.log('Response status:', response.status);
        const data = await response.json();
        console.log('Response data:', data);
        
        if (response.ok) {
          console.log('Phone number validated successfully');
          return true;
        } else {
          console.error('Phone validation failed:', data.message);
          alert(data.message || 'Phone number verification failed. Retry.');
          return false;
        }
      } catch (error) {
        console.error('Error validating phone number:', error);
        alert('Network connection error. Verify connection and retry.');
        return false;
      }
    }

    backToStep1() {
      this.step2PasswordTarget.classList.add('hidden');
      this.step2OTPTarget.classList.add('hidden');
      this.step1Target.classList.remove('hidden');
      this.identifierTarget.value = '';
      this.currentStep = 1;
      this.identifierType = null;
    }

    async resendOTP() {
      const phone = this.otpPhoneTarget.value;
      if (phone) {
        try {
          const response = await fetch('/api/v1/auth/send-otp', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ phone: phone })
          });
          
          const data = await response.json();
          
          if (response.ok) {
            alert('Verification code resent successfully');
          } else {
            alert(data.message || 'Verification code resend failed. Retry.');
          }
        } catch (error) {
          console.error('Error resending OTP:', error);
          alert('Network connection error. Verify connection and retry.');
        }
      }
    }

    setupOTPFormatting() {
      // Focus on first OTP input when OTP step is shown
      setTimeout(() => {
        this.otpDigit1Target.focus();
      }, 100);
    }

    moveToNext(event) {
      const currentInput = event.target;
      const currentValue = currentInput.value;
      
      // Only allow numbers
      if (!/^\d$/.test(currentValue)) {
        currentInput.value = '';
        return;
      }
      
      // Find current input index
      const inputs = [this.otpDigit1Target, this.otpDigit2Target, this.otpDigit3Target, 
                     this.otpDigit4Target, this.otpDigit5Target, this.otpDigit6Target];
      const currentIndex = inputs.indexOf(currentInput);
      
      // Move to next input if not the last one
      if (currentIndex < inputs.length - 1) {
        inputs[currentIndex + 1].focus();
      }
    }

    updateOTPValue() {
      // Combine all OTP digits
      const otpValue = [
        this.otpDigit1Target.value,
        this.otpDigit2Target.value,
        this.otpDigit3Target.value,
        this.otpDigit4Target.value,
        this.otpDigit5Target.value,
        this.otpDigit6Target.value
      ].join('');
      
      // Update hidden input
      this.otpHiddenTarget.value = otpValue;
    }

    handleOTPKeydown(event) {
      const currentInput = event.target;
      const inputs = [this.otpDigit1Target, this.otpDigit2Target, this.otpDigit3Target, 
                     this.otpDigit4Target, this.otpDigit5Target, this.otpDigit6Target];
      const currentIndex = inputs.indexOf(currentInput);
      
      // Handle backspace
      if (event.key === 'Backspace') {
        if (currentInput.value === '' && currentIndex > 0) {
          // If current input is empty and backspace is pressed, go to previous input
          inputs[currentIndex - 1].focus();
          inputs[currentIndex - 1].value = '';
        }
      }
      
      // Only allow numbers
      if (!/^\d$/.test(event.key) && 
          !['Backspace', 'Delete', 'Tab', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(event.key)) {
        event.preventDefault();
      }
    }

    handleOTPSubmit(e) {
      e.preventDefault(); // Prevent form submission
      
      // The OTP value is already updated in the hidden input via updateOTPValue()
      const otpValue = this.otpHiddenTarget.value;
      const phone = this.otpPhoneTarget.value;
      
      console.log('OTP submit - phone:', phone);
      console.log('OTP submit - otp:', otpValue);
      
      if (otpValue.length !== 6) {
        alert('Complete 6-digit verification code required');
        return false;
      }
      
      // Submit via AJAX
      this.submitOTP(phone, otpValue);
    }
    
    async submitOTP(phone, otp) {
      try {
        const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
        console.log('Submitting OTP with CSRF token:', csrfToken);
        
        const response = await fetch('/api/v1/auth/login-with-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrfToken,
            'Accept': 'application/json'
          },
          body: JSON.stringify({ 
            phone: phone,
            otp: otp 
          })
        });
        
        console.log('OTP response status:', response.status);
        const data = await response.json();
        console.log('OTP response data:', data);
        
        if (response.ok) {
          // Success - redirect to dashboard or show success message
          alert('Login successful! Welcome back.');
          window.location.href = '/dashboard';
        } else {
          // Show error message
          alert(data.message || 'OTP verification failed. Please try again.');
        }
      } catch (error) {
        console.error('Error submitting OTP:', error);
        alert('Network error. Please try again.');
      }
    }
  });
});
</script>
