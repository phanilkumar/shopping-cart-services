<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sign In - UserService</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.6;
      color: #1a202c;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 2rem 0;
    }
    
    .login-container {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 24px;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
      padding: 3rem;
      width: 100%;
      max-width: 450px;
      margin: 2rem;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .header {
      text-align: center;
      margin-bottom: 2.5rem;
    }
    
    .logo {
      width: 72px;
      height: 72px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      border-radius: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 1.5rem;
      color: white;
      font-size: 2rem;
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }
    
    .title {
      font-size: 2rem;
      font-weight: 700;
      color: #1a202c;
      margin-bottom: 0.5rem;
    }
    
    .subtitle {
      color: #4a5568;
      font-size: 1rem;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }
    
    .form-label {
      display: block;
      font-size: 0.875rem;
      font-weight: 600;
      color: #2d3748;
      margin-bottom: 0.5rem;
    }
    
    .form-input {
      width: 100%;
      padding: 1rem 1.25rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: white;
      color: #1a202c;
    }
    
    .form-input:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
      transform: translateY(-1px);
    }
    
    .form-input.error {
      border-color: #e53e3e;
      box-shadow: 0 0 0 4px rgba(229, 62, 62, 0.1);
    }
    
    .form-input.success {
      border-color: #38a169;
      box-shadow: 0 0 0 4px rgba(56, 161, 105, 0.1);
    }
    
    .error-message {
      color: #e53e3e;
      font-size: 0.75rem;
      margin-top: 0.5rem;
      display: none;
      font-weight: 500;
    }
    
    .success-message {
      color: #38a169;
      font-size: 0.75rem;
      margin-top: 0.5rem;
      display: none;
      font-weight: 500;
    }
    
    .password-toggle {
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #a0aec0;
      cursor: pointer;
      font-size: 1.125rem;
      transition: color 0.3s ease;
    }
    
    .password-toggle:hover {
      color: #4a5568;
    }
    
    .password-field {
      position: relative;
    }
    
    .form-options {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }
    
    .checkbox-group {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .checkbox {
      width: 1rem;
      height: 1rem;
      border: 2px solid #e2e8f0;
      border-radius: 4px;
      cursor: pointer;
    }
    
    .checkbox-label {
      font-size: 0.875rem;
      color: #4a5568;
      cursor: pointer;
    }
    
    .forgot-link {
      color: #667eea;
      text-decoration: none;
      font-size: 0.875rem;
      font-weight: 500;
      transition: color 0.3s ease;
    }
    
    .forgot-link:hover {
      color: #5a6fd8;
      text-decoration: underline;
    }
    
    .btn {
      width: 100%;
      padding: 1rem 2rem;
      border: none;
      border-radius: 12px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
    }
    
    .btn-primary:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }
    
    .btn-secondary {
      background: #f7fafc;
      color: #4a5568;
      border: 2px solid #e2e8f0;
    }
    
    .btn-secondary:hover {
      background: #edf2f7;
      transform: translateY(-1px);
    }
    
    .divider {
      text-align: center;
      margin: 2rem 0;
      position: relative;
    }
    
    .divider::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 0;
      right: 0;
      height: 1px;
      background: #e2e8f0;
    }
    
    .divider span {
      background: rgba(255, 255, 255, 0.95);
      padding: 0 1rem;
      color: #4a5568;
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    .loading {
      display: none;
      text-align: center;
      margin: 1rem 0;
    }
    
    .spinner {
      width: 24px;
      height: 24px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #667eea;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto 0.5rem;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .alert {
      padding: 1rem 1.25rem;
      border-radius: 12px;
      margin-bottom: 1.5rem;
      display: none;
      font-weight: 500;
    }
    
    .alert-success {
      background: #f0fff4;
      color: #22543d;
      border: 1px solid #9ae6b4;
    }
    
    .alert-error {
      background: #fed7d7;
      color: #742a2a;
      border: 1px solid #feb2b2;
    }
    
    .links {
      text-align: center;
      margin-top: 2rem;
    }
    
    .links a {
      color: #667eea;
      text-decoration: none;
      font-size: 0.875rem;
      font-weight: 500;
      margin: 0 0.5rem;
      transition: color 0.3s ease;
    }
    
    .links a:hover {
      color: #5a6fd8;
      text-decoration: underline;
    }
    
    .social-login {
      margin-top: 1.5rem;
    }
    
    .social-btn {
      width: 100%;
      padding: 0.875rem 1.5rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      background: white;
      color: #4a5568;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      margin-bottom: 0.75rem;
    }
    
    .social-btn:hover {
      background: #f7fafc;
      border-color: #cbd5e0;
      transform: translateY(-1px);
    }
    
    @media (max-width: 480px) {
      .login-container {
        margin: 1rem;
        padding: 2rem;
      }
      
      .title {
        font-size: 1.75rem;
      }
      
      .form-options {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
      }
    }
  </style>
</head>
<body>
  <div class="login-container">
    <div class="header">
      <div class="logo">üîê</div>
      <h1 class="title">Welcome Back</h1>
      <p class="subtitle">Sign in to your UserService account</p>
    </div>

    <div class="alert alert-success" id="successAlert">
      ‚úÖ Login successful! Redirecting to dashboard...
    </div>

    <div class="alert alert-error" id="errorAlert">
      ‚ùå Invalid email or password. Please try again.
    </div>

    <form id="loginForm">
      <div class="form-group">
        <label class="form-label" for="email">Email Address</label>
        <input type="email" id="email" name="email" class="form-input" placeholder="Enter your email" required>
        <div class="error-message" id="emailError">Please enter a valid email address</div>
        <div class="success-message" id="emailSuccess">‚úì Email looks good!</div>
      </div>

      <div class="form-group">
        <label class="form-label" for="password">Password</label>
        <div class="password-field">
          <input type="password" id="password" name="password" class="form-input" placeholder="Enter your password" required>
          <button type="button" class="password-toggle" id="passwordToggle">üëÅÔ∏è</button>
        </div>
        <div class="error-message" id="passwordError">Password is required</div>
      </div>

      <div class="form-options">
        <div class="checkbox-group">
          <input type="checkbox" id="remember" class="checkbox">
          <label for="remember" class="checkbox-label">Remember me</label>
        </div>
        <a href="/users/password/new" class="forgot-link">Forgot password?</a>
      </div>

      <button type="submit" class="btn btn-primary" id="loginBtn">
        üîë Sign In
      </button>
    </form>

    <div class="loading" id="loading">
      <div class="spinner"></div>
      <p>Signing you in...</p>
    </div>

    <div class="divider">
      <span>or continue with</span>
    </div>

    <div class="social-login">
      <button class="social-btn" onclick="socialLogin('google')">
        <span>üîç</span>
        Continue with Google
      </button>
      <button class="social-btn" onclick="socialLogin('github')">
        <span>üêô</span>
        Continue with GitHub
      </button>
    </div>

    <div class="links">
      <a href="/users/sign_up">Create Account</a>
      <span>‚Ä¢</span>
      <a href="/">Back to Home</a>
    </div>
  </div>

  <script>
    const form = document.getElementById('loginForm');
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const passwordToggle = document.getElementById('passwordToggle');
    const loginBtn = document.getElementById('loginBtn');
    const loading = document.getElementById('loading');
    const successAlert = document.getElementById('successAlert');
    const errorAlert = document.getElementById('errorAlert');

    // Password toggle functionality
    passwordToggle.addEventListener('click', function() {
      const type = passwordInput.type === 'password' ? 'text' : 'password';
      passwordInput.type = type;
      this.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üôà';
    });

    // Form validation
    function validateEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    }

    function showError(input, message) {
      input.classList.add('error');
      input.classList.remove('success');
      const errorElement = document.getElementById(input.id + 'Error');
      if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
      }
    }

    function showSuccess(input) {
      input.classList.remove('error');
      input.classList.add('success');
      const errorElement = document.getElementById(input.id + 'Error');
      if (errorElement) {
        errorElement.style.display = 'none';
      }
    }

    function clearError(input) {
      input.classList.remove('error', 'success');
      const errorElement = document.getElementById(input.id + 'Error');
      if (errorElement) {
        errorElement.style.display = 'none';
      }
    }

    // Real-time validation
    emailInput.addEventListener('blur', function() {
      if (!this.value) {
        showError(this, 'Email is required');
      } else if (!validateEmail(this.value)) {
        showError(this, 'Please enter a valid email address');
      } else {
        showSuccess(this);
      }
    });

    passwordInput.addEventListener('blur', function() {
      if (!this.value) {
        showError(this, 'Password is required');
      } else {
        clearError(this);
      }
    });

    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Clear previous messages
      successAlert.style.display = 'none';
      errorAlert.style.display = 'none';
      
      // Validate form
      let isValid = true;
      
      if (!emailInput.value) {
        showError(emailInput, 'Email is required');
        isValid = false;
      } else if (!validateEmail(emailInput.value)) {
        showError(emailInput, 'Please enter a valid email address');
        isValid = false;
      } else {
        showSuccess(emailInput);
      }
      
      if (!passwordInput.value) {
        showError(passwordInput, 'Password is required');
        isValid = false;
      } else {
        clearError(passwordInput);
      }
      
      if (!isValid) return;
      
      // Show loading state
      loginBtn.disabled = true;
      loading.style.display = 'block';
      
      try {
        // Simulate API call (replace with actual login logic)
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Show success
        successAlert.style.display = 'block';
        
        // Redirect after 2 seconds
        setTimeout(() => {
          window.location.href = '/auth/dashboard';
        }, 2000);
        
      } catch (error) {
        errorAlert.style.display = 'block';
        loginBtn.disabled = false;
        loading.style.display = 'none';
      }
    });

    // Social login functions
    function socialLogin(provider) {
      console.log(`Logging in with ${provider}...`);
      // Implement social login logic here
      alert(`${provider} login functionality would be implemented here`);
    }

    // Add input focus effects
    document.querySelectorAll('.form-input').forEach(input => {
      input.addEventListener('focus', function() {
        this.parentElement.style.transform = 'translateY(-2px)';
      });
      
      input.addEventListener('blur', function() {
        this.parentElement.style.transform = 'translateY(0)';
      });
    });

    // Add smooth transitions
    document.querySelectorAll('.form-group').forEach(group => {
      group.style.transition = 'transform 0.3s ease';
    });

    // Add hover effects for buttons
    document.querySelectorAll('.btn, .social-btn').forEach(btn => {
      btn.addEventListener('mouseenter', function() {
        if (!this.disabled) {
          this.style.transform = 'translateY(-2px)';
        }
      });
      
      btn.addEventListener('mouseleave', function() {
        this.style.transform = 'translateY(0)';
      });
    });

    // Auto-focus email input on page load
    window.addEventListener('load', function() {
      emailInput.focus();
    });
  </script>
</body>
</html>
