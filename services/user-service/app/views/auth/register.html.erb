<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Account - UserService</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.6;
      color: #1a202c;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 2rem 0;
    }
    
    .register-container {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 24px;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
      padding: 3rem;
      width: 100%;
      max-width: 550px;
      margin: 2rem;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .header {
      text-align: center;
      margin-bottom: 2.5rem;
    }
    
    .logo {
      width: 72px;
      height: 72px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      border-radius: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 1.5rem;
      color: white;
      font-size: 2rem;
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }
    
    .title {
      font-size: 2rem;
      font-weight: 700;
      color: #1a202c;
      margin-bottom: 0.5rem;
    }
    
    .subtitle {
      color: #4a5568;
      font-size: 1rem;
    }
    
    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }
    
    .form-group.full-width {
      grid-column: 1 / -1;
    }
    
    .form-label {
      display: block;
      font-size: 0.875rem;
      font-weight: 600;
      color: #2d3748;
      margin-bottom: 0.5rem;
    }
    
    .form-input {
      width: 100%;
      padding: 1rem 1.25rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: white;
      color: #1a202c;
    }
    
    .form-input:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
      transform: translateY(-1px);
    }
    
    .form-input.error {
      border-color: #e53e3e;
      box-shadow: 0 0 0 4px rgba(229, 62, 62, 0.1);
    }
    
    .form-input.success {
      border-color: #38a169;
      box-shadow: 0 0 0 4px rgba(56, 161, 105, 0.1);
    }
    
    .error-message {
      color: #e53e3e;
      font-size: 0.75rem;
      margin-top: 0.5rem;
      display: none;
      font-weight: 500;
    }
    
    .success-message {
      color: #38a169;
      font-size: 0.75rem;
      margin-top: 0.5rem;
      display: none;
      font-weight: 500;
    }
    
    .password-strength {
      margin-top: 0.75rem;
    }
    
    .strength-bar {
      height: 6px;
      background: #e2e8f0;
      border-radius: 3px;
      overflow: hidden;
      margin-top: 0.5rem;
    }
    
    .strength-fill {
      height: 100%;
      transition: width 0.3s ease, background-color 0.3s ease;
      width: 0%;
    }
    
    .strength-weak { background-color: #e53e3e; }
    .strength-fair { background-color: #dd6b20; }
    .strength-good { background-color: #3182ce; }
    .strength-strong { background-color: #38a169; }
    
    .strength-text {
      font-size: 0.75rem;
      font-weight: 500;
      margin-top: 0.5rem;
    }
    
    .strength-weak-text { color: #e53e3e; }
    .strength-fair-text { color: #dd6b20; }
    .strength-good-text { color: #3182ce; }
    .strength-strong-text { color: #38a169; }
    
    .password-toggle {
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #a0aec0;
      cursor: pointer;
      font-size: 1.125rem;
      transition: color 0.3s ease;
    }
    
    .password-toggle:hover {
      color: #4a5568;
    }
    
    .password-field {
      position: relative;
    }
    
    .btn {
      width: 100%;
      padding: 1rem 2rem;
      border: none;
      border-radius: 12px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
    }
    
    .btn-primary:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }
    
    .btn-secondary {
      background: #f7fafc;
      color: #4a5568;
      border: 2px solid #e2e8f0;
    }
    
    .btn-secondary:hover {
      background: #edf2f7;
      transform: translateY(-1px);
    }
    
    .divider {
      text-align: center;
      margin: 2rem 0;
      position: relative;
    }
    
    .divider::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 0;
      right: 0;
      height: 1px;
      background: #e2e8f0;
    }
    
    .divider span {
      background: rgba(255, 255, 255, 0.95);
      padding: 0 1rem;
      color: #4a5568;
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    .loading {
      display: none;
      text-align: center;
      margin: 1rem 0;
    }
    
    .spinner {
      width: 24px;
      height: 24px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #667eea;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto 0.5rem;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .alert {
      padding: 1rem 1.25rem;
      border-radius: 12px;
      margin-bottom: 1.5rem;
      display: none;
      font-weight: 500;
    }
    
    .alert-success {
      background: #f0fff4;
      color: #22543d;
      border: 1px solid #9ae6b4;
    }
    
    .alert-error {
      background: #fed7d7;
      color: #742a2a;
      border: 1px solid #feb2b2;
    }
    
    .links {
      text-align: center;
      margin-top: 2rem;
    }
    
    .links a {
      color: #667eea;
      text-decoration: none;
      font-size: 0.875rem;
      font-weight: 500;
      margin: 0 0.5rem;
      transition: color 0.3s ease;
    }
    
    .links a:hover {
      color: #5a6fd8;
      text-decoration: underline;
    }
    
    .terms {
      font-size: 0.75rem;
      color: #4a5568;
      text-align: center;
      margin-top: 1.5rem;
      line-height: 1.5;
    }
    
    .terms a {
      color: #667eea;
      text-decoration: none;
      font-weight: 500;
    }
    
    .terms a:hover {
      text-decoration: underline;
    }
    
    .social-login {
      margin-top: 1.5rem;
    }
    
    .social-btn {
      width: 100%;
      padding: 0.875rem 1.5rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      background: white;
      color: #4a5568;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      margin-bottom: 0.75rem;
    }
    
    .social-btn:hover {
      background: #f7fafc;
      border-color: #cbd5e0;
      transform: translateY(-1px);
    }
    
    @media (max-width: 768px) {
      .form-row {
        grid-template-columns: 1fr;
      }
      
      .register-container {
        margin: 1rem;
        padding: 2rem;
      }
      
      .title {
        font-size: 1.75rem;
      }
    }
    
    @media (max-width: 480px) {
      .register-container {
        margin: 0.5rem;
        padding: 1.5rem;
      }
      
      .title {
        font-size: 1.5rem;
      }
    }
  </style>
</head>
<body>
  <div class="register-container">
    <div class="header">
      <div class="logo">üë§</div>
      <h1 class="title">Create Your Account</h1>
      <p class="subtitle">Join thousands of users on UserService</p>
    </div>

    <div class="alert alert-success" id="successAlert">
      ‚úÖ Account created successfully! Redirecting to login...
    </div>

    <div class="alert alert-error" id="errorAlert">
      ‚ùå There was an error creating your account. Please try again.
    </div>

    <form id="registerForm">
      <div class="form-row">
        <div class="form-group">
          <label class="form-label" for="firstName">First Name</label>
          <input type="text" id="firstName" name="firstName" class="form-input" placeholder="Enter your first name" required>
          <div class="error-message" id="firstNameError">First name is required</div>
        </div>

        <div class="form-group">
          <label class="form-label" for="lastName">Last Name</label>
          <input type="text" id="lastName" name="lastName" class="form-input" placeholder="Enter your last name" required>
          <div class="error-message" id="lastNameError">Last name is required</div>
        </div>
      </div>

      <div class="form-group">
        <label class="form-label" for="email">Email Address</label>
        <input type="email" id="email" name="email" class="form-input" placeholder="Enter your email address" required>
        <div class="error-message" id="emailError">Please enter a valid email address</div>
        <div class="success-message" id="emailSuccess">‚úì Email looks good!</div>
      </div>

      <div class="form-group">
        <label class="form-label" for="phone">Phone Number</label>
        <input type="tel" id="phone" name="phone" class="form-input" placeholder="Enter your phone number" required>
        <div class="error-message" id="phoneError">Please enter a valid phone number</div>
      </div>

      <div class="form-group">
        <label class="form-label" for="password">Password</label>
        <div class="password-field">
          <input type="password" id="password" name="password" class="form-input" placeholder="Create a strong password" required>
          <button type="button" class="password-toggle" id="passwordToggle">üëÅÔ∏è</button>
        </div>
        <div class="error-message" id="passwordError">Password must be at least 8 characters</div>
        <div class="password-strength">
          <div class="strength-bar">
            <div class="strength-fill" id="strengthFill"></div>
          </div>
          <div class="strength-text" id="strengthText">Password strength: Weak</div>
        </div>
      </div>

      <div class="form-group">
        <label class="form-label" for="confirmPassword">Confirm Password</label>
        <div class="password-field">
          <input type="password" id="confirmPassword" name="confirmPassword" class="form-input" placeholder="Confirm your password" required>
          <button type="button" class="password-toggle" id="confirmPasswordToggle">üëÅÔ∏è</button>
        </div>
        <div class="error-message" id="confirmPasswordError">Passwords do not match</div>
      </div>

      <button type="submit" class="btn btn-primary" id="registerBtn">
        üöÄ Create Account
      </button>
    </form>

    <div class="loading" id="loading">
      <div class="spinner"></div>
      <p>Creating your account...</p>
    </div>

    <div class="divider">
      <span>or continue with</span>
    </div>

    <div class="social-login">
      <button class="social-btn" onclick="socialRegister('google')">
        <span>üîç</span>
        Continue with Google
      </button>
      <button class="social-btn" onclick="socialRegister('github')">
        <span>üêô</span>
        Continue with GitHub
      </button>
    </div>

    <div class="links">
      <a href="/users/sign_in">Already have an account? Sign In</a>
      <span>‚Ä¢</span>
      <a href="/">Back to Home</a>
    </div>

    <div class="terms">
      By creating an account, you agree to our 
      <a href="/terms">Terms of Service</a> and 
      <a href="/privacy">Privacy Policy</a>
    </div>
  </div>

  <script>
    const form = document.getElementById('registerForm');
    const firstNameInput = document.getElementById('firstName');
    const lastNameInput = document.getElementById('lastName');
    const emailInput = document.getElementById('email');
    const phoneInput = document.getElementById('phone');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const passwordToggle = document.getElementById('passwordToggle');
    const confirmPasswordToggle = document.getElementById('confirmPasswordToggle');
    const registerBtn = document.getElementById('registerBtn');
    const loading = document.getElementById('loading');
    const successAlert = document.getElementById('successAlert');
    const errorAlert = document.getElementById('errorAlert');
    const strengthFill = document.getElementById('strengthFill');
    const strengthText = document.getElementById('strengthText');

    // Password toggle functionality
    passwordToggle.addEventListener('click', function() {
      const type = passwordInput.type === 'password' ? 'text' : 'password';
      passwordInput.type = type;
      this.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üôà';
    });

    confirmPasswordToggle.addEventListener('click', function() {
      const type = confirmPasswordInput.type === 'password' ? 'text' : 'password';
      confirmPasswordInput.type = type;
      this.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üôà';
    });

    // Validation functions
    function validateEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    }

    function validatePhone(phone) {
      const re = /^[\+]?[1-9][\d]{0,15}$/;
      return re.test(phone.replace(/\s/g, ''));
    }

    function validatePassword(password) {
      const minLength = password.length >= 8;
      const hasUpperCase = /[A-Z]/.test(password);
      const hasLowerCase = /[a-z]/.test(password);
      const hasNumbers = /\d/.test(password);
      const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);
      
      const score = [minLength, hasUpperCase, hasLowerCase, hasNumbers, hasSpecialChar]
        .filter(Boolean).length;
      
      return {
        score: score,
        isStrong: score >= 4,
        isGood: score >= 3,
        isFair: score >= 2,
        isWeak: score < 2
      };
    }

    function updatePasswordStrength(password) {
      const validation = validatePassword(password);
      const percentage = (validation.score / 5) * 100;
      
      strengthFill.style.width = percentage + '%';
      strengthFill.className = 'strength-fill';
      strengthText.className = 'strength-text';
      
      if (validation.isStrong) {
        strengthFill.classList.add('strength-strong');
        strengthText.classList.add('strength-strong-text');
        strengthText.textContent = 'Password strength: Strong';
      } else if (validation.isGood) {
        strengthFill.classList.add('strength-good');
        strengthText.classList.add('strength-good-text');
        strengthText.textContent = 'Password strength: Good';
      } else if (validation.isFair) {
        strengthFill.classList.add('strength-fair');
        strengthText.classList.add('strength-fair-text');
        strengthText.textContent = 'Password strength: Fair';
      } else {
        strengthFill.classList.add('strength-weak');
        strengthText.classList.add('strength-weak-text');
        strengthText.textContent = 'Password strength: Weak';
      }
    }

    function showError(input, message) {
      input.classList.add('error');
      input.classList.remove('success');
      const errorElement = document.getElementById(input.id + 'Error');
      if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
      }
    }

    function showSuccess(input) {
      input.classList.remove('error');
      input.classList.add('success');
      const errorElement = document.getElementById(input.id + 'Error');
      if (errorElement) {
        errorElement.style.display = 'none';
      }
    }

    function clearError(input) {
      input.classList.remove('error', 'success');
      const errorElement = document.getElementById(input.id + 'Error');
      if (errorElement) {
        errorElement.style.display = 'none';
      }
    }

    // Real-time validation
    firstNameInput.addEventListener('blur', function() {
      if (!this.value.trim()) {
        showError(this, 'First name is required');
      } else {
        clearError(this);
      }
    });

    lastNameInput.addEventListener('blur', function() {
      if (!this.value.trim()) {
        showError(this, 'Last name is required');
      } else {
        clearError(this);
      }
    });

    emailInput.addEventListener('blur', function() {
      if (!this.value) {
        showError(this, 'Email is required');
      } else if (!validateEmail(this.value)) {
        showError(this, 'Please enter a valid email address');
      } else {
        showSuccess(this);
      }
    });

    phoneInput.addEventListener('blur', function() {
      if (!this.value) {
        showError(this, 'Phone number is required');
      } else if (!validatePhone(this.value)) {
        showError(this, 'Please enter a valid phone number');
      } else {
        clearError(this);
      }
    });

    passwordInput.addEventListener('input', function() {
      updatePasswordStrength(this.value);
    });

    passwordInput.addEventListener('blur', function() {
      if (!this.value) {
        showError(this, 'Password is required');
      } else if (this.value.length < 8) {
        showError(this, 'Password must be at least 8 characters');
      } else {
        clearError(this);
      }
    });

    confirmPasswordInput.addEventListener('blur', function() {
      if (!this.value) {
        showError(this, 'Please confirm your password');
      } else if (this.value !== passwordInput.value) {
        showError(this, 'Passwords do not match');
      } else {
        clearError(this);
      }
    });

    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Clear previous messages
      successAlert.style.display = 'none';
      errorAlert.style.display = 'none';
      
      // Validate all fields
      let isValid = true;
      
      if (!firstNameInput.value.trim()) {
        showError(firstNameInput, 'First name is required');
        isValid = false;
      }
      
      if (!lastNameInput.value.trim()) {
        showError(lastNameInput, 'Last name is required');
        isValid = false;
      }
      
      if (!emailInput.value) {
        showError(emailInput, 'Email is required');
        isValid = false;
      } else if (!validateEmail(emailInput.value)) {
        showError(emailInput, 'Please enter a valid email address');
        isValid = false;
      }
      
      if (!phoneInput.value) {
        showError(phoneInput, 'Phone number is required');
        isValid = false;
      } else if (!validatePhone(phoneInput.value)) {
        showError(phoneInput, 'Please enter a valid phone number');
        isValid = false;
      }
      
      if (!passwordInput.value) {
        showError(passwordInput, 'Password is required');
        isValid = false;
      } else if (passwordInput.value.length < 8) {
        showError(passwordInput, 'Password must be at least 8 characters');
        isValid = false;
      }
      
      if (!confirmPasswordInput.value) {
        showError(confirmPasswordInput, 'Please confirm your password');
        isValid = false;
      } else if (confirmPasswordInput.value !== passwordInput.value) {
        showError(confirmPasswordInput, 'Passwords do not match');
        isValid = false;
      }
      
      if (!isValid) return;
      
      // Show loading state
      registerBtn.disabled = true;
      loading.style.display = 'block';
      
      try {
        // Simulate API call (replace with actual registration logic)
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // Show success
        successAlert.style.display = 'block';
        
        // Redirect after 3 seconds
        setTimeout(() => {
          window.location.href = '/users/sign_in';
        }, 3000);
        
      } catch (error) {
        errorAlert.style.display = 'block';
        registerBtn.disabled = false;
        loading.style.display = 'none';
      }
    });

    // Social registration functions
    function socialRegister(provider) {
      console.log(`Registering with ${provider}...`);
      // Implement social registration logic here
      alert(`${provider} registration functionality would be implemented here`);
    }

    // Add input focus effects
    document.querySelectorAll('.form-input').forEach(input => {
      input.addEventListener('focus', function() {
        this.parentElement.style.transform = 'translateY(-2px)';
      });
      
      input.addEventListener('blur', function() {
        this.parentElement.style.transform = 'translateY(0)';
      });
    });

    // Add smooth transitions
    document.querySelectorAll('.form-group').forEach(group => {
      group.style.transition = 'transform 0.3s ease';
    });

    // Add hover effects for buttons
    document.querySelectorAll('.btn, .social-btn').forEach(btn => {
      btn.addEventListener('mouseenter', function() {
        if (!this.disabled) {
          this.style.transform = 'translateY(-2px)';
        }
      });
      
      btn.addEventListener('mouseleave', function() {
        this.style.transform = 'translateY(0)';
      });
    });

    // Auto-focus first name input on page load
    window.addEventListener('load', function() {
      firstNameInput.focus();
    });
  </script>
</body>
</html>
