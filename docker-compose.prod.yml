version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ecommerce_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    restart: unless-stopped

  # API Gateway Service
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.prod
    environment:
      RAILS_ENV: production
      DATABASE_URL: ${API_GATEWAY_DATABASE_URL}
      REDIS_URL: ${API_GATEWAY_REDIS_URL}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      USER_SERVICE_URL: http://user-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3002
      ORDER_SERVICE_URL: http://order-service:3003
      CART_SERVICE_URL: http://cart-service:3004
    depends_on:
      - postgres
      - redis
    networks:
      - ecommerce-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile.prod
    environment:
      RAILS_ENV: production
      DATABASE_URL: ${USER_SERVICE_DATABASE_URL}
      REDIS_URL: ${USER_SERVICE_REDIS_URL}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile.prod
    environment:
      RAILS_ENV: production
      DATABASE_URL: ${PRODUCT_SERVICE_DATABASE_URL}
      REDIS_URL: ${PRODUCT_SERVICE_REDIS_URL}
    depends_on:
      - postgres
      - redis
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile.prod
    environment:
      RAILS_ENV: production
      DATABASE_URL: ${ORDER_SERVICE_DATABASE_URL}
      REDIS_URL: ${ORDER_SERVICE_REDIS_URL}
      USER_SERVICE_URL: http://user-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3002
    depends_on:
      - postgres
      - redis
      - user-service
      - product-service
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Cart Service
  cart-service:
    build:
      context: ./services/cart-service
      dockerfile: Dockerfile.prod
    environment:
      RAILS_ENV: production
      DATABASE_URL: ${CART_SERVICE_DATABASE_URL}
      REDIS_URL: ${CART_SERVICE_REDIS_URL}
      PRODUCT_SERVICE_URL: http://product-service:3002
    depends_on:
      - postgres
      - redis
      - product-service
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_ENV: production
    depends_on:
      - api-gateway
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile.prod
    environment:
      RAILS_ENV: production
      DATABASE_URL: ${NOTIFICATION_SERVICE_DATABASE_URL}
      REDIS_URL: ${NOTIFICATION_SERVICE_REDIS_URL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    depends_on:
      - postgres
      - redis
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - frontend
    networks:
      - ecommerce-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  ecommerce-network:
    driver: bridge

